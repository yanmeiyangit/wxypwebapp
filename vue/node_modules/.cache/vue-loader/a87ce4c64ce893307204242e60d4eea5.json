{"remainingRequest":"/Users/mia/Documents/wxypwebapp/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mia/Documents/wxypwebapp/vue/src/components/public/Scroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mia/Documents/wxypwebapp/vue/src/components/public/Scroll.vue","mtime":1554103443657},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport BScroll from \"better-scroll\";\nexport default {\n    props: {\n        probeType: {\n            type: Number,\n            default: 1\n        },\n        data: {\n            type: null,\n            default: null\n        },\n        click: {\n            type: Boolean,\n            default: true\n        },\n        listenScroll: {\n            //监听scroll滚动\n            type: Boolean,\n            default: false\n        },\n        // 是否开启上拉加载\n        pullup: {\n            type: Boolean,\n            default: false\n        },\n        // 下拉刷新\n        pullDownRefresh: {\n            type: null,\n            default: false\n        },\n        // 移动端滚动\n        beforeScroll: {\n            type: Boolean,\n            default: false\n        },\n        timer: {\n            type: Number,\n            default: 20\n        },\n        bounce: {\n            type: Object,\n            default() {\n                return { top: true };\n            }\n        }\n    },\n    data() {\n        return {\n            inPullDown: false\n        };\n    },\n    methods: {\n        init() {\n            if (!this.$refs.warpper) {\n                return;\n            }\n            this.scroll = new BScroll(this.$refs.warpper, {\n                probeType: this.probeType,\n                click: this.click,\n                pullDownRefresh: this.pullDownRefresh,\n                bounce: this.bounce\n            });\n            if (this.listenScroll) {\n                //滚动事件触发\n                const that = this; //pos 指的是滚动到的位置\n                this.scroll.on(\"scroll\", pos => {\n                    that.$emit(\"scroll\", pos);\n                });\n            }\n\n            // 上拉加载\n            if (this.pullup) {\n                this.scroll.on(\"scrollEnd\", () => {\n                    if (this.scroll.y <= this.scroll.maxScrollY + 50) {\n                        this.$emit(\"scrollToEnd\");\n                    }\n                });\n            }\n\n            // 下拉刷新\n            if (this.pullDownRefresh) {\n                this.scroll.on(\"scroll\", pos => {\n                    if (pos.y > 50) {\n                        this.$emit(\"scrollChange\");\n                    }\n                });\n                //滑动结束松开事件\n                this.scroll.on(\"pullingDown\", () => {\n                    this.$emit(\"onPullDown\");\n                });\n            }\n            // 移动端滚动\n            if (this.beforeScroll) {\n                this.scroll.on(\"beforeScrollStart\", () => {\n                    this.$emit(\"beforeScroll\");\n                });\n            }\n        },\n        // 开启滚动\n        enable() {\n            this.scroll && this.scroll.enable();\n        },\n        // 关闭滚动\n        disable() {\n            this.scroll && this.scroll.disable();\n        },\n        finishPullDown() {\n            this.scroll && this.scroll.finishPullDown();\n        },\n        refresh() {\n            this.scroll && this.scroll.refresh();\n        },\n        scrollToElement() {\n            this.scroll &&\n                this.scroll.scrollToElement.apply(this.scroll, arguments);\n        },\n        scrollTo() {\n            this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\n        }\n    },\n    mounted() {\n        setTimeout(() => {\n            //确保在dom初始化后才执行滚动方法\n            this.init();\n        }, 20);\n    },\n    watch: {\n        data() {\n            //监听传入进来的data数据的变化，重新就算高度\n            setTimeout(() => {\n                this.refresh();\n            }, this.timer);\n        }\n    }\n};\n",{"version":3,"sources":["Scroll.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Scroll.vue","sourceRoot":"src/components/public","sourcesContent":["<template>\n    <!-- 滚动组件 -->\n    <div ref=\"warpper\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\nimport BScroll from \"better-scroll\";\nexport default {\n    props: {\n        probeType: {\n            type: Number,\n            default: 1\n        },\n        data: {\n            type: null,\n            default: null\n        },\n        click: {\n            type: Boolean,\n            default: true\n        },\n        listenScroll: {\n            //监听scroll滚动\n            type: Boolean,\n            default: false\n        },\n        // 是否开启上拉加载\n        pullup: {\n            type: Boolean,\n            default: false\n        },\n        // 下拉刷新\n        pullDownRefresh: {\n            type: null,\n            default: false\n        },\n        // 移动端滚动\n        beforeScroll: {\n            type: Boolean,\n            default: false\n        },\n        timer: {\n            type: Number,\n            default: 20\n        },\n        bounce: {\n            type: Object,\n            default() {\n                return { top: true };\n            }\n        }\n    },\n    data() {\n        return {\n            inPullDown: false\n        };\n    },\n    methods: {\n        init() {\n            if (!this.$refs.warpper) {\n                return;\n            }\n            this.scroll = new BScroll(this.$refs.warpper, {\n                probeType: this.probeType,\n                click: this.click,\n                pullDownRefresh: this.pullDownRefresh,\n                bounce: this.bounce\n            });\n            if (this.listenScroll) {\n                //滚动事件触发\n                const that = this; //pos 指的是滚动到的位置\n                this.scroll.on(\"scroll\", pos => {\n                    that.$emit(\"scroll\", pos);\n                });\n            }\n\n            // 上拉加载\n            if (this.pullup) {\n                this.scroll.on(\"scrollEnd\", () => {\n                    if (this.scroll.y <= this.scroll.maxScrollY + 50) {\n                        this.$emit(\"scrollToEnd\");\n                    }\n                });\n            }\n\n            // 下拉刷新\n            if (this.pullDownRefresh) {\n                this.scroll.on(\"scroll\", pos => {\n                    if (pos.y > 50) {\n                        this.$emit(\"scrollChange\");\n                    }\n                });\n                //滑动结束松开事件\n                this.scroll.on(\"pullingDown\", () => {\n                    this.$emit(\"onPullDown\");\n                });\n            }\n            // 移动端滚动\n            if (this.beforeScroll) {\n                this.scroll.on(\"beforeScrollStart\", () => {\n                    this.$emit(\"beforeScroll\");\n                });\n            }\n        },\n        // 开启滚动\n        enable() {\n            this.scroll && this.scroll.enable();\n        },\n        // 关闭滚动\n        disable() {\n            this.scroll && this.scroll.disable();\n        },\n        finishPullDown() {\n            this.scroll && this.scroll.finishPullDown();\n        },\n        refresh() {\n            this.scroll && this.scroll.refresh();\n        },\n        scrollToElement() {\n            this.scroll &&\n                this.scroll.scrollToElement.apply(this.scroll, arguments);\n        },\n        scrollTo() {\n            this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\n        }\n    },\n    mounted() {\n        setTimeout(() => {\n            //确保在dom初始化后才执行滚动方法\n            this.init();\n        }, 20);\n    },\n    watch: {\n        data() {\n            //监听传入进来的data数据的变化，重新就算高度\n            setTimeout(() => {\n                this.refresh();\n            }, this.timer);\n        }\n    }\n};\n</script>\n\n\n"]}]}