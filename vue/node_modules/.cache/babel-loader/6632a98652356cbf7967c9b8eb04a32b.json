{"remainingRequest":"/Users/mia/Documents/wxypapp/Vue-shopping/vue/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!/Users/mia/Documents/wxypapp/Vue-shopping/vue/src/assets/js/util.js","dependencies":[{"path":"/Users/mia/Documents/wxypapp/Vue-shopping/vue/src/assets/js/util.js","mtime":1554103443653},{"path":"/Users/mia/Documents/wxypapp/Vue-shopping/vue/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypapp/Vue-shopping/vue/node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _typeof from \"/Users/mia/Documents/wxypapp/Vue-shopping/vue/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\n\nvar _this = this;\n\n/**\n *  数组的分块\n * @param arr 需要分块的数组\n * @param size 分块的数量\n */\nvar chunk = function chunk(arr, size) {\n  return Array.from({\n    length: Math.ceil(arr.length / size)\n  }, function (v, i) {\n    return arr.slice(i * size, i * size + size);\n  });\n};\n/**\n * 给浏览器添加css前缀\n * @return 各种浏览器的css前缀\n */\n\n\nvar elementStyle = document.createElement('div').style;\n\nvar vendor = function () {\n  var transformNames = {\n    'webkit': 'webkitTransform',\n    'Moz': 'MozTransform',\n    'O': 'OTransform',\n    'ms': 'msTransform',\n    'standard': 'transform'\n  };\n\n  for (var k in transformNames) {\n    if (elementStyle[transformNames[k]] !== undefined) {\n      return k;\n    }\n  }\n\n  return false;\n}();\n\nvar prefix = function prefix(style) {\n  if (!vendor) {\n    //如果供应商有问题，直接return\n    return false;\n  }\n\n  if (vendor === 'standard') {\n    return style;\n  }\n\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n};\n/**\n * 数组随机打乱(洗牌函数)\n * @param arr 需要打乱的数组\n * @return Array 最终打乱的数组\n */\n\n\nvar shuffle = function shuffle(arr) {\n  var _arr = arr.slice(); //不修改原数组\n\n\n  for (var i = 0; i < _arr.length; i++) {\n    var j = getRandomInt(0, i); // 变量的交换\n\n    var t = _arr[i];\n    _arr[i] = _arr[j];\n    _arr[j] = t;\n  }\n\n  return _arr;\n};\n/**\n * 获取多少道多少之间的随机整数\n * @param min 最小数字\n * @param max 最大数字\n * @return 随机数\n */\n\n\nvar getRandomInt = function getRandomInt(min, max) {\n  return Math.random() * (max - min + 1) + min | 0;\n};\n/**\n * 函数节流方法\n * @param Function fn 延时调用函数\n * @param Number delay 延迟多长时间\n * @param Number atleast 至少多长时间触发一次\n * @return Function 延迟执行的方法\n */\n// atleast要大于dalay\n\n\nvar throttle = function throttle(fn) {\n  var dalay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var flag = false;\n  return function () {\n    if (flag) return;\n    flag = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    fn(args);\n    setTimeout(function () {\n      flag = false;\n    }, dalay);\n  }; // let timer = null\n  // let previous = null\n  // return (...args) => {\n  //     let now = +new Date()\t//获取当前时间戳\n  //     !previous ? now : previous\n  //     if (atleast && now - previous > atleast) {\n  //         fn.apply(this, args)\n  //         // 重置上一次开始时间为本次结束时间\n  //         previous = now\n  //         clearTimeout(timer)\n  //     } else {\n  //         clearTimeout(timer)\n  //         timer = setTimeout(() => {\n  //             fn.apply(this, args)\n  //             previous = null\n  //         }, dalay)\n  //     }\n  // }\n};\n/**\n * 函数去抖方法\n * @param Function fn 延时调用函数\n * @param Number delay 延迟多长时间\n * @return Function 延迟执行的方法\n */\n\n\nvar debounce = function debounce(fn, dalay) {\n  var timer = null;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(_this, args);\n    }, dalay);\n  };\n};\n/**\n * 搜索关键词高亮显示\n * @param String str 要替换的关键词\n * @param String value 搜索框里面的内容\n * @return Function 替换后的内容\n */\n\n\nvar keyWord = function keyWord(str, value) {\n  var replaceReg = new RegExp(value, 'g');\n  var replaceString = \"<span style='color:red'>\".concat(value, \"</span>\");\n  str = str.replace(replaceReg, replaceString);\n  return str;\n}; // 深度拷贝\n\n\nvar cloneObj = function cloneObj(obj) {\n  if (!obj || _typeof(obj) !== 'object') return;\n  var newObj = new obj.constructor(); // 拷贝原型链上的\n\n  for (var key in Object.getOwnPropertyDescriptors(obj)) {\n    // 拷贝自己的成员\n    newObj[key] = cloneObj(obj[key]);\n  }\n\n  return newObj;\n};\n\nexport { chunk, //数组分块\nthrottle, //函数节流\ndebounce, //函数防抖\nprefix, //各种浏览器的css前缀\ngetRandomInt, //获取多少道多少之间的随机整数\nshuffle, //数组随机打乱(洗牌函数)\nkeyWord };",{"version":3,"sources":["/Users/mia/Documents/wxypapp/Vue-shopping/vue/src/assets/js/util.js"],"names":["chunk","arr","size","Array","from","length","Math","ceil","v","i","slice","elementStyle","document","createElement","style","vendor","transformNames","k","undefined","prefix","charAt","toUpperCase","substr","shuffle","_arr","j","getRandomInt","t","min","max","random","throttle","fn","dalay","flag","args","setTimeout","debounce","timer","clearTimeout","apply","keyWord","str","value","replaceReg","RegExp","replaceString","replace","cloneObj","obj","newObj","constructor","key","Object","getOwnPropertyDescriptors"],"mappings":"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","sourcesContent":["/**\n *  数组的分块\n * @param arr 需要分块的数组\n * @param size 分块的数量\n */\nconst chunk = (arr, size) =>\n    Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n        arr.slice(i * size, i * size + size)\n    );\n\n\n\n\n/**\n * 给浏览器添加css前缀\n * @return 各种浏览器的css前缀\n */\nlet elementStyle = document.createElement('div').style\nlet vendor = (() => {\n    let transformNames = {\n        'webkit': 'webkitTransform',\n        'Moz': 'MozTransform',\n        'O': 'OTransform',\n        'ms': 'msTransform',\n        'standard': 'transform'\n    }\n    for (let k in transformNames) {\n        if (elementStyle[transformNames[k]] !== undefined) {\n            return k\n        }\n    }\n    return false\n})()\nconst prefix = (style) => {\n    if (!vendor) {  //如果供应商有问题，直接return\n        return false\n    }\n    if (vendor === 'standard') {\n        return style\n    }\n    return vendor + style.charAt(0).toUpperCase() + style.substr(1)\n}\n\n/**\n * 数组随机打乱(洗牌函数)\n * @param arr 需要打乱的数组\n * @return Array 最终打乱的数组\n */\nconst shuffle = function (arr) {\n    let _arr = arr.slice()  //不修改原数组\n    for (let i = 0; i < _arr.length; i++) {\n        let j = getRandomInt(0, i)\n        // 变量的交换\n        let t = _arr[i]\n        _arr[i] = _arr[j]\n        _arr[j] = t\n    }\n    return _arr\n}\n\n/**\n * 获取多少道多少之间的随机整数\n * @param min 最小数字\n * @param max 最大数字\n * @return 随机数\n */\nconst getRandomInt = function (min, max) {\n    return (Math.random() * (max - min + 1) + min) | 0\n}\n\n\n/**\n * 函数节流方法\n * @param Function fn 延时调用函数\n * @param Number delay 延迟多长时间\n * @param Number atleast 至少多长时间触发一次\n * @return Function 延迟执行的方法\n */\n// atleast要大于dalay\nconst throttle = (fn, dalay = 1000) => {\n    let flag = false\n    return (...args) => {\n        if (flag) return\n        flag = true\n        fn(args)\n        setTimeout(() => {\n            flag = false\n        }, dalay);\n    }\n    // let timer = null\n    // let previous = null\n    // return (...args) => {\n    //     let now = +new Date()\t//获取当前时间戳\n    //     !previous ? now : previous\n    //     if (atleast && now - previous > atleast) {\n    //         fn.apply(this, args)\n    //         // 重置上一次开始时间为本次结束时间\n    //         previous = now\n    //         clearTimeout(timer)\n    //     } else {\n    //         clearTimeout(timer)\n    //         timer = setTimeout(() => {\n    //             fn.apply(this, args)\n    //             previous = null\n    //         }, dalay)\n    //     }\n    // }\n}\n\n/**\n * 函数去抖方法\n * @param Function fn 延时调用函数\n * @param Number delay 延迟多长时间\n * @return Function 延迟执行的方法\n */\nconst debounce = (fn, dalay) => {\n    let timer = null\n    return (...args) => {\n        if (timer) clearTimeout(timer)\n        timer = setTimeout(() => {\n            fn.apply(this, args)\n        }, dalay);\n    }\n}\n\n/**\n * 搜索关键词高亮显示\n * @param String str 要替换的关键词\n * @param String value 搜索框里面的内容\n * @return Function 替换后的内容\n */\nconst keyWord = (str, value) => {\n    const replaceReg = new RegExp(value, 'g');\n    const replaceString = `<span style='color:red'>${value}</span>`\n    str = str.replace(replaceReg, replaceString);\n    return str\n}\n\n// 深度拷贝\nconst cloneObj = (obj) => {\n    if (!obj || typeof obj !== 'object') return\n    const newObj = new obj.constructor() // 拷贝原型链上的\n    for (const key in Object.getOwnPropertyDescriptors(obj)) { // 拷贝自己的成员\n        newObj[key] = cloneObj(obj[key])\n    }\n    return newObj\n}\n\n\nexport {\n    chunk,              //数组分块\n    throttle,           //函数节流\n    debounce,           //函数防抖\n    prefix,             //各种浏览器的css前缀\n    getRandomInt,       //获取多少道多少之间的随机整数\n    shuffle,            //数组随机打乱(洗牌函数)\n    keyWord,            //搜索关键词高亮显示\n}"]}]}