{"remainingRequest":"/Users/mia/Documents/wxypwebapp/vue/node_modules/babel-loader/lib/index.js!/Users/mia/Documents/wxypwebapp/vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mia/Documents/wxypwebapp/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mia/Documents/wxypwebapp/vue/src/components/my/Cropper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mia/Documents/wxypwebapp/vue/src/components/my/Cropper.vue","mtime":1554103443655},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"/Users/mia/Documents/wxypwebapp/vue/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\nimport Cropper from \"cropperjs\";\nexport default {\n  props: {\n    imgStyle: {\n      //裁剪后的图像显示\n      type: Object,\n      default: {\n        width: \"50px\",\n        height: \"50px\",\n        \"border-radius\": \"50%\"\n      }\n    },\n    // 定义的宽高比\n    widthRate: {\n      type: Number,\n      default: 500\n    },\n    // 定义的宽高比\n    heightRate: {\n      type: Number,\n      default: 500\n    },\n    imgUrl: {\n      type: String,\n      default: function _default() {\n        return \"\";\n      }\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {},\n  methods: {\n    change: function change(event) {\n      var image = document.getElementById(\"img\"); //预览对象\n\n      this.clip(event, {\n        resultObj: image,\n        aspectWithRatio: Number(this.widthRate),\n        aspectHeightRatio: Number(this.heightRate)\n      });\n    },\n    //初始化方法\n    initilize: function initilize(opt) {\n      var _ref;\n\n      var self = this;\n      this.options = opt; //创建dom\n\n      this.createElement();\n      this.resultObj = opt.resultObj; //初始化裁剪对象\n\n      this.cropper = new Cropper(this.preview, (_ref = {\n        aspectRatio: opt.aspectWithRatio / opt.aspectHeightRatio,\n        // aspectRatio: 1/1,\n        autoCropArea: opt.autoCropArea || 0.8,\n        viewMode: 2,\n        guides: true,\n        cropBoxResizable: true,\n        //是否通过拖动来调整剪裁框的大小\n        cropBoxMovable: true,\n        //是否通过拖拽来移动剪裁框。\n        dragCrop: false,\n        dragMode: \"move\",\n        //‘crop’: 可以产生一个新的裁剪框3 ‘move’: 只可以移动3 ‘none’: 什么也不处理\n        center: true,\n        zoomable: true,\n        //是否允许放大图像。\n        zoomOnTouch: true,\n        //是否可以通过拖动触摸来放大图像。\n        scalable: true,\n        // minCropBoxHeight: 750,\n        // minCropBoxWidth: 750,\n        background: false,\n        checkOrientation: true,\n        checkCrossOrigin: true\n      }, _defineProperty(_ref, \"zoomable\", false), _defineProperty(_ref, \"zoomOnWheel\", false), _defineProperty(_ref, \"center\", false), _defineProperty(_ref, \"toggleDragModeOnDblclick\", false), _defineProperty(_ref, \"ready\", function ready() {\n        // console.log(self.cropper.rotate(90))\n        if (opt.aspectRatio == \"Free\") {\n          var cropBox = self.cropper.cropBox;\n          cropBox.querySelector(\"span.cropper-view-box\").style.outline = \"none\";\n          self.cropper.disable();\n        }\n      }), _ref));\n    },\n    //创建一些必要的DOM，用于图片裁剪\n    createElement: function createElement() {\n      //初始化图片为空对象\n      this.preview = null; // <img src=\"../../assets/app/loading.gif\">\n\n      var str = '<div><img id=\"clip_image\" src=\"originUrl\"></div><button type=\"button\" id=\"cancel_clip\">取消</button><button type=\"button\" id=\"clip_button\">确定</button>';\n      str += '<div class=\"crop_loading\"><div class=\"crop_content\"><div class=\"crop_text\">图片修剪中...</div></div></div>';\n      str += '<div class=\"crop_success\"><div class=\"crop_success_text\">上传成功</div></div></div>'; //   let body = document.getElementsByTagName('body')[0];\n\n      var app = document.getElementById(\"setAvatar\");\n      this.reagion = document.createElement(\"div\");\n      this.reagion.id = \"clip_container\";\n      this.reagion.className = \"container\";\n      this.reagion.innerHTML = str; //添加创建好的DOM元素\n\n      app.appendChild(this.reagion);\n      this.preview = document.getElementById(\"clip_image\"); //绑定一些方法\n\n      this.initFunction();\n    },\n    //初始化一些函数绑定\n    initFunction: function initFunction() {\n      var self = this;\n      this.clickBtn = document.getElementById(\"clip_button\");\n      this.cancelBtn = document.getElementById(\"cancel_clip\"); //确定事件\n\n      this.addEvent(this.clickBtn, \"click\", function () {\n        self.crop();\n      }); //取消事件\n\n      this.addEvent(this.cancelBtn, \"click\", function () {\n        self.destoried();\n      }); //清空input的值\n\n      this.addEvent(this.fileObj, \"click\", function () {\n        this.value = \"\";\n      });\n    },\n    //外部接口，用于input['file']对象change时的调用\n    clip: function clip(e, opt) {\n      var self = this;\n      this.fileObj = e.srcElement;\n      var files = e.target.files || e.dataTransfer.files;\n      if (!files.length) return false; //不是图片直接返回\n      //调用初始化方法\n\n      this.initilize(opt); //获取图片文件资源\n\n      this.picValue = files[0];\n      console.log(this.picValue); //调用方法转成url格式\n\n      this.originUrl = this.getObjectURL(this.picValue); //每次替换图片要重新得到新的url\n\n      if (this.cropper) {\n        this.cropper.replace(this.originUrl);\n      }\n    },\n    //图片转码方法\n    getObjectURL: function getObjectURL(file) {\n      var url = null;\n\n      if (window.createObjectURL != undefined) {\n        // basic\n        url = window.createObjectURL(file);\n      } else if (window.URL != undefined) {\n        // mozilla(firefox)\n        url = window.URL.createObjectURL(file);\n      } else if (window.webkitURL != undefined) {\n        // webkit or chrome\n        url = window.webkitURL.createObjectURL(file);\n      }\n\n      return url;\n    },\n    //点击确定进行裁剪\n    crop: function crop() {\n      var self = this;\n      var image = new Image();\n      var croppedCanvas;\n      var roundedCanvas; // Crop\n\n      document.querySelector(\".crop_loading\").style.display = \"block\";\n      setTimeout(function () {\n        croppedCanvas = self.cropper.getCroppedCanvas(); // Round\n\n        roundedCanvas = self.getRoundedCanvas(croppedCanvas);\n        var imgData = roundedCanvas.toDataURL();\n        image.src = imgData; //判断图片是否大于100k,不大于直接上传，反之压缩\n\n        if (imgData.length < 100 * 1024) {\n          self.resultObj.src = imgData; //图片上传\n\n          self.postImg(imgData);\n        } else {\n          image.onload = function () {\n            //压缩处理\n            var data = self.compress(image, self.Orientation);\n            self.resultObj.src = data; //图片上传\n\n            self.postImg(data);\n          };\n        }\n      }, 20);\n    },\n    //获取裁剪图片资源\n    getRoundedCanvas: function getRoundedCanvas(sourceCanvas) {\n      var canvas = document.createElement(\"canvas\");\n      var context = canvas.getContext(\"2d\");\n      var width = sourceCanvas.width;\n      var height = sourceCanvas.height;\n      canvas.width = width;\n      canvas.height = height;\n      context.imageSmoothingEnabled = true;\n      context.drawImage(sourceCanvas, 0, 0, width, height);\n      context.globalCompositeOperation = \"destination-in\";\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.fill();\n      return canvas;\n    },\n    //销毁原来的对象\n    destoried: function destoried() {\n      var self = this; //移除事件\n\n      this.removeEvent(this.clickBtn, \"click\", null);\n      this.removeEvent(this.cancelBtn, \"click\", null);\n      this.removeEvent(this.fileObj, \"click\", null); //移除裁剪框\n\n      this.reagion.parentNode.removeChild(this.reagion); //销毁裁剪对象\n\n      this.cropper.destroy();\n      this.cropper = null;\n    },\n    //图片上传\n    postImg: function postImg(imageData) {\n      // console.log(imageData)\n      this.$emit(\"callback\", imageData); //这边写图片的上传\n\n      var self = this;\n      self.destoried(); // window.setTimeout( function () {\n      //   document.querySelector('.crop_loading').style.display = 'none';\n      //   document.querySelector('.crop_success').style.display = 'block';\n      //   //裁剪完后摧毁对象\n      //     self.destoried();\n      // },3000)\n    },\n    //图片旋转\n    rotateImg: function rotateImg(img, direction, canvas) {\n      //最小与最大旋转方向，图片旋转4次后回到原方向\n      var min_step = 0;\n      var max_step = 3;\n      if (img == null) return; //img的高度和宽度不能在img元素隐藏后获取，否则会出错\n\n      var height = img.height;\n      var width = img.width;\n      var step = 2;\n\n      if (step == null) {\n        step = min_step;\n      }\n\n      if (direction == \"right\") {\n        step++; //旋转到原位置，即超过最大值\n\n        step > max_step && (step = min_step);\n      } else {\n        step--;\n        step < min_step && (step = max_step);\n      } //旋转角度以弧度值为参数\n\n\n      var degree = step * 90 * Math.PI / 180;\n      var ctx = canvas.getContext(\"2d\");\n\n      switch (step) {\n        case 0:\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0);\n          break;\n\n        case 1:\n          canvas.width = height;\n          canvas.height = width;\n          ctx.rotate(degree);\n          ctx.drawImage(img, 0, -height);\n          break;\n\n        case 2:\n          canvas.width = width;\n          canvas.height = height;\n          ctx.rotate(degree);\n          ctx.drawImage(img, -width, -height);\n          break;\n\n        case 3:\n          canvas.width = height;\n          canvas.height = width;\n          ctx.rotate(degree);\n          ctx.drawImage(img, -width, 0);\n          break;\n      }\n    },\n    //图片压缩\n    compress: function compress(img, Orientation) {\n      var canvas = document.createElement(\"canvas\");\n      var ctx = canvas.getContext(\"2d\"); //瓦片canvas\n\n      var tCanvas = document.createElement(\"canvas\");\n      var tctx = tCanvas.getContext(\"2d\");\n      var initSize = img.src.length;\n      var width = img.width;\n      var height = img.height; //如果图片大于四百万像素，计算压缩比并将大小压至400万以下\n\n      var ratio;\n\n      if ((ratio = width * height / 4000000) > 1) {\n        console.log(\"大于400万像素\");\n        ratio = Math.sqrt(ratio);\n        width /= ratio;\n        height /= ratio;\n      } else {\n        ratio = 1;\n      }\n\n      canvas.width = width;\n      canvas.height = height; //        铺底色\n\n      ctx.fillStyle = \"#fff\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height); //如果图片像素大于100万则使用瓦片绘制\n\n      var count;\n\n      if ((count = width * height / 1000000) > 1) {\n        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片\n        //            计算每块瓦片的宽和高\n\n        var nw = ~~(width / count);\n        var nh = ~~(height / count);\n        tCanvas.width = nw;\n        tCanvas.height = nh;\n\n        for (var i = 0; i < count; i++) {\n          for (var j = 0; j < count; j++) {\n            tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);\n            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\n          }\n        }\n      } else {\n        ctx.drawImage(img, 0, 0, width, height);\n      } //修复ios上传图片的时候 被旋转的问题\n\n\n      if (Orientation != \"\" && Orientation != 1) {\n        switch (Orientation) {\n          case 6:\n            //需要顺时针（向左）90度旋转\n            this.rotateImg(img, \"left\", canvas);\n            break;\n\n          case 8:\n            //需要逆时针（向右）90度旋转\n            this.rotateImg(img, \"right\", canvas);\n            break;\n\n          case 3:\n            //需要180度旋转\n            this.rotateImg(img, \"right\", canvas); //转两次\n\n            this.rotateImg(img, \"right\", canvas);\n            break;\n        }\n      } //进行最小压缩\n      // let ndata = canvas.toDataURL( 'image/jpeg' , 0.1);\n\n\n      var ndata = canvas.toDataURL(\"image/png\", 0.1);\n      console.log(\"压缩前：\" + initSize);\n      console.log(\"压缩后：\" + ndata.length);\n      console.log(\"压缩率：\" + ~~(100 * (initSize - ndata.length) / initSize) + \"%\");\n      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;\n      return ndata;\n    },\n    //添加事件\n    addEvent: function addEvent(obj, type, fn) {\n      if (obj.addEventListener) {\n        obj.addEventListener(type, fn, false);\n      } else {\n        obj.attachEvent(\"on\" + type, fn);\n      }\n    },\n    //移除事件\n    removeEvent: function removeEvent(obj, type, fn) {\n      if (obj.removeEventListener) {\n        obj.removeEventListener(type, fn, false);\n      } else {\n        obj.detachEvent(\"on\" + type, fn);\n      }\n    }\n  }\n};",{"version":3,"sources":["Cropper.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<!-- 图片裁剪 -->\n  <div class=\"vue-box\">\n    <img :src=\"imgUrl\" alt id=\"img\" :style=\"imgStyle\">\n    <input type=\"file\" class=\"file\"  accept=\"image/*\"  @change=\"change($event)\">\n  </div>\n</template>\n<script>\nimport Cropper from \"cropperjs\";\nexport default {\n  props: {\n    imgStyle: {\n      //裁剪后的图像显示\n      type: Object,\n      default: {\n        width: \"50px\",\n        height: \"50px\",\n        \"border-radius\": \"50%\"\n      }\n    },\n    // 定义的宽高比\n    widthRate: {\n      type: Number,\n      default: 500\n    },\n    // 定义的宽高比\n    heightRate: {\n      type: Number,\n      default: 500\n    },\n    imgUrl: {\n      type: String,\n      default: function() {\n        return \"\";\n      }\n    }\n  },\n  data() {\n    return {};\n  },\n  mounted() {\n   \n  },\n  methods: {\n    change(event) {\n      let image = document.getElementById(\"img\"); //预览对象\n      this.clip(event, {\n        resultObj: image,\n        aspectWithRatio: Number(this.widthRate),\n        aspectHeightRatio: Number(this.heightRate)\n      });\n    },\n    //初始化方法\n    initilize(opt) {\n      let self = this;\n      this.options = opt;\n      //创建dom\n      this.createElement();\n      this.resultObj = opt.resultObj;\n      //初始化裁剪对象\n      this.cropper = new Cropper(this.preview, {\n        aspectRatio: opt.aspectWithRatio / opt.aspectHeightRatio,\n        // aspectRatio: 1/1,\n        autoCropArea: opt.autoCropArea || 0.8,\n        viewMode: 2,\n        guides: true,\n        cropBoxResizable: true, //是否通过拖动来调整剪裁框的大小\n        cropBoxMovable: true, //是否通过拖拽来移动剪裁框。\n        dragCrop: false,\n        dragMode: \"move\", //‘crop’: 可以产生一个新的裁剪框3 ‘move’: 只可以移动3 ‘none’: 什么也不处理\n        center: true,\n        zoomable: true, //是否允许放大图像。\n        zoomOnTouch: true, //是否可以通过拖动触摸来放大图像。\n        scalable: true,\n        // minCropBoxHeight: 750,\n        // minCropBoxWidth: 750,\n        background: false,\n        checkOrientation: true,\n        checkCrossOrigin: true,\n        zoomable: false,\n        zoomOnWheel: false,\n        center: false,\n        toggleDragModeOnDblclick: false,\n        ready: function() {\n          // console.log(self.cropper.rotate(90))\n          if (opt.aspectRatio == \"Free\") {\n            let cropBox = self.cropper.cropBox;\n            cropBox.querySelector(\"span.cropper-view-box\").style.outline =\n              \"none\";\n            self.cropper.disable();\n          }\n        }\n      });\n    },\n    //创建一些必要的DOM，用于图片裁剪\n    createElement() {\n      //初始化图片为空对象\n      this.preview = null;\n      // <img src=\"../../assets/app/loading.gif\">\n      let str =\n        '<div><img id=\"clip_image\" src=\"originUrl\"></div><button type=\"button\" id=\"cancel_clip\">取消</button><button type=\"button\" id=\"clip_button\">确定</button>';\n      str +=\n        '<div class=\"crop_loading\"><div class=\"crop_content\"><div class=\"crop_text\">图片修剪中...</div></div></div>';\n      str +=\n        '<div class=\"crop_success\"><div class=\"crop_success_text\">上传成功</div></div></div>';\n\n      //   let body = document.getElementsByTagName('body')[0];\n      let app = document.getElementById(\"setAvatar\");\n      this.reagion = document.createElement(\"div\");\n      this.reagion.id = \"clip_container\";\n      this.reagion.className = \"container\";\n      this.reagion.innerHTML = str;\n      //添加创建好的DOM元素\n      app.appendChild(this.reagion);\n      this.preview = document.getElementById(\"clip_image\");\n\n      //绑定一些方法\n      this.initFunction();\n    },\n    //初始化一些函数绑定\n    initFunction() {\n      let self = this;\n      this.clickBtn = document.getElementById(\"clip_button\");\n      this.cancelBtn = document.getElementById(\"cancel_clip\");\n      //确定事件\n      this.addEvent(this.clickBtn, \"click\", function() {\n        self.crop();\n      });\n      //取消事件\n      this.addEvent(this.cancelBtn, \"click\", function() {\n        self.destoried();\n      });\n      //清空input的值\n      this.addEvent(this.fileObj, \"click\", function() {\n        this.value = \"\";\n      });\n    },\n    //外部接口，用于input['file']对象change时的调用\n    clip(e, opt) {\n      let self = this;\n\n      this.fileObj = e.srcElement;\n\n      let files = e.target.files || e.dataTransfer.files;\n\n      if (!files.length) return false; //不是图片直接返回\n\n      //调用初始化方法\n      this.initilize(opt);\n\n      //获取图片文件资源\n      this.picValue = files[0];\n\n      console.log(this.picValue);\n\n      //调用方法转成url格式\n      this.originUrl = this.getObjectURL(this.picValue);\n\n      //每次替换图片要重新得到新的url\n      if (this.cropper) {\n        this.cropper.replace(this.originUrl);\n      }\n    },\n    //图片转码方法\n    getObjectURL(file) {\n      let url = null;\n      if (window.createObjectURL != undefined) {\n        // basic\n        url = window.createObjectURL(file);\n      } else if (window.URL != undefined) {\n        // mozilla(firefox)\n        url = window.URL.createObjectURL(file);\n      } else if (window.webkitURL != undefined) {\n        // webkit or chrome\n        url = window.webkitURL.createObjectURL(file);\n      }\n      return url;\n    },\n    //点击确定进行裁剪\n    crop() {\n      let self = this;\n      let image = new Image();\n      let croppedCanvas;\n      let roundedCanvas;\n\n      // Crop\n      document.querySelector(\".crop_loading\").style.display = \"block\";\n\n      setTimeout(function() {\n        croppedCanvas = self.cropper.getCroppedCanvas();\n        // Round\n        roundedCanvas = self.getRoundedCanvas(croppedCanvas);\n\n        let imgData = roundedCanvas.toDataURL();\n        image.src = imgData;\n\n        //判断图片是否大于100k,不大于直接上传，反之压缩\n        if (imgData.length < 100 * 1024) {\n          self.resultObj.src = imgData;\n          //图片上传\n          self.postImg(imgData);\n        } else {\n          image.onload = function() {\n            //压缩处理\n            let data = self.compress(image, self.Orientation);\n            self.resultObj.src = data;\n            //图片上传\n            self.postImg(data);\n          };\n        }\n      }, 20);\n    },\n    //获取裁剪图片资源\n    getRoundedCanvas(sourceCanvas) {\n      let canvas = document.createElement(\"canvas\");\n      let context = canvas.getContext(\"2d\");\n      let width = sourceCanvas.width;\n      let height = sourceCanvas.height;\n\n      canvas.width = width;\n      canvas.height = height;\n\n      context.imageSmoothingEnabled = true;\n      context.drawImage(sourceCanvas, 0, 0, width, height);\n      context.globalCompositeOperation = \"destination-in\";\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.fill();\n\n      return canvas;\n    },\n    //销毁原来的对象\n    destoried() {\n      let self = this;\n      //移除事件\n      this.removeEvent(this.clickBtn, \"click\", null);\n      this.removeEvent(this.cancelBtn, \"click\", null);\n      this.removeEvent(this.fileObj, \"click\", null);\n      //移除裁剪框\n      this.reagion.parentNode.removeChild(this.reagion);\n\n      //销毁裁剪对象\n      this.cropper.destroy();\n      this.cropper = null;\n    },\n    //图片上传\n    postImg(imageData) {\n      // console.log(imageData)\n\n      this.$emit(\"callback\", imageData);\n      //这边写图片的上传\n      let self = this;\n      self.destoried();\n\n      // window.setTimeout( function () {\n      //   document.querySelector('.crop_loading').style.display = 'none';\n      //   document.querySelector('.crop_success').style.display = 'block';\n      //   //裁剪完后摧毁对象\n      //     self.destoried();\n      // },3000)\n    },\n    //图片旋转\n    rotateImg(img, direction, canvas) {\n      //最小与最大旋转方向，图片旋转4次后回到原方向\n      const min_step = 0;\n      const max_step = 3;\n      if (img == null) return;\n      //img的高度和宽度不能在img元素隐藏后获取，否则会出错\n      let height = img.height;\n      let width = img.width;\n      let step = 2;\n      if (step == null) {\n        step = min_step;\n      }\n      if (direction == \"right\") {\n        step++;\n        //旋转到原位置，即超过最大值\n        step > max_step && (step = min_step);\n      } else {\n        step--;\n        step < min_step && (step = max_step);\n      }\n      //旋转角度以弧度值为参数\n      let degree = (step * 90 * Math.PI) / 180;\n      let ctx = canvas.getContext(\"2d\");\n      switch (step) {\n        case 0:\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0);\n          break;\n        case 1:\n          canvas.width = height;\n          canvas.height = width;\n          ctx.rotate(degree);\n          ctx.drawImage(img, 0, -height);\n          break;\n        case 2:\n          canvas.width = width;\n          canvas.height = height;\n          ctx.rotate(degree);\n          ctx.drawImage(img, -width, -height);\n          break;\n        case 3:\n          canvas.width = height;\n          canvas.height = width;\n          ctx.rotate(degree);\n          ctx.drawImage(img, -width, 0);\n          break;\n      }\n    },\n    //图片压缩\n    compress(img, Orientation) {\n      let canvas = document.createElement(\"canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      //瓦片canvas\n      let tCanvas = document.createElement(\"canvas\");\n      let tctx = tCanvas.getContext(\"2d\");\n      let initSize = img.src.length;\n      let width = img.width;\n      let height = img.height;\n\n      //如果图片大于四百万像素，计算压缩比并将大小压至400万以下\n      let ratio;\n      if ((ratio = (width * height) / 4000000) > 1) {\n        console.log(\"大于400万像素\");\n        ratio = Math.sqrt(ratio);\n        width /= ratio;\n        height /= ratio;\n      } else {\n        ratio = 1;\n      }\n      canvas.width = width;\n      canvas.height = height;\n      //        铺底色\n      ctx.fillStyle = \"#fff\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      //如果图片像素大于100万则使用瓦片绘制\n      let count;\n      if ((count = (width * height) / 1000000) > 1) {\n        count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片\n        //            计算每块瓦片的宽和高\n        let nw = ~~(width / count);\n        let nh = ~~(height / count);\n        tCanvas.width = nw;\n        tCanvas.height = nh;\n        for (let i = 0; i < count; i++) {\n          for (let j = 0; j < count; j++) {\n            tctx.drawImage(\n              img,\n              i * nw * ratio,\n              j * nh * ratio,\n              nw * ratio,\n              nh * ratio,\n              0,\n              0,\n              nw,\n              nh\n            );\n            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\n          }\n        }\n      } else {\n        ctx.drawImage(img, 0, 0, width, height);\n      }\n      //修复ios上传图片的时候 被旋转的问题\n      if (Orientation != \"\" && Orientation != 1) {\n        switch (Orientation) {\n          case 6: //需要顺时针（向左）90度旋转\n            this.rotateImg(img, \"left\", canvas);\n            break;\n          case 8: //需要逆时针（向右）90度旋转\n            this.rotateImg(img, \"right\", canvas);\n            break;\n          case 3: //需要180度旋转\n            this.rotateImg(img, \"right\", canvas); //转两次\n            this.rotateImg(img, \"right\", canvas);\n            break;\n        }\n      }\n      //进行最小压缩\n      // let ndata = canvas.toDataURL( 'image/jpeg' , 0.1);\n      let ndata = canvas.toDataURL(\"image/png\", 0.1);\n      console.log(\"压缩前：\" + initSize);\n      console.log(\"压缩后：\" + ndata.length);\n      console.log(\n        \"压缩率：\" + ~~((100 * (initSize - ndata.length)) / initSize) + \"%\"\n      );\n      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;\n\n      return ndata;\n    },\n    //添加事件\n    addEvent(obj, type, fn) {\n      if (obj.addEventListener) {\n        obj.addEventListener(type, fn, false);\n      } else {\n        obj.attachEvent(\"on\" + type, fn);\n      }\n    },\n    //移除事件\n    removeEvent(obj, type, fn) {\n      if (obj.removeEventListener) {\n        obj.removeEventListener(type, fn, false);\n      } else {\n        obj.detachEvent(\"on\" + type, fn);\n      }\n    }\n  }\n};\n</script>\n<style scoped>\n.vue-box {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  min-height: 0.4rem;\n}\n\n.vue-box .file {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  top: 0;\n  left: 0;\n  z-index: 99;\n  cursor: pointer;\n}\n\nimg {\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n}\n\nh3 {\n  text-align: center;\n}\n\nh1,\nh2 {\n  font-weight: normal;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components/my"}]}