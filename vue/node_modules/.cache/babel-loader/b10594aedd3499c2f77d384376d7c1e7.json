{"remainingRequest":"/Users/mia/Documents/wxypwebapp/vue/node_modules/babel-loader/lib/index.js!/Users/mia/Documents/wxypwebapp/vue/src/assets/js/axios.js","dependencies":[{"path":"/Users/mia/Documents/wxypwebapp/vue/src/assets/js/axios.js","mtime":1554274342325},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mia/Documents/wxypwebapp/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport store from '../../store';\nvar server = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/v1' : '/api/v1',\n  timeout: 2000 // 超时\n\n}); // server.interceptors.request.use(\n//     config => {\n//         if (store.state.token) {  // 判断是否存在token，如果存在的话，则每个http header都加上token\n//             config.headers.Authorization = `${store.state.token}`;\n//         }\n//         return config;\n//     },\n//     err => {\n//         return Promise.reject(err);\n//     });\n// // http response 拦截器\n// server.interceptors.response.use(\n//     response => {\n//         return response;\n//     },\n//     error => {\n//         if (error.response) {\n//             switch (error.response.status) {\n//                 case 401:\n//                     store.dispatch('clearToken') // 清除token\n//             }\n//         }\n//         return Promise.reject(error.response.data)   // 返回接口返回的错误信息\n//     });\n\nexport default server;",{"version":3,"sources":["/Users/mia/Documents/wxypwebapp/vue/src/assets/js/axios.js"],"names":["axios","store","server","create","baseURL","process","env","NODE_ENV","timeout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,IAAMC,MAAM,GAAGF,KAAK,CAACG,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,KAAxC,GAAgD,SADjC;AAExBC,EAAAA,OAAO,EAAE,IAFe,CAER;;AAFQ,CAAb,CAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeN,MAAf","sourcesContent":["import axios from 'axios'\nimport store from '../../store'\nconst server = axios.create({\n    baseURL: process.env.NODE_ENV === 'production' ? '/v1' : '/api/v1',\n    timeout: 2000,  // 超时\n})\n\n// server.interceptors.request.use(\n//     config => {\n//         if (store.state.token) {  // 判断是否存在token，如果存在的话，则每个http header都加上token\n//             config.headers.Authorization = `${store.state.token}`;\n//         }\n//         return config;\n//     },\n//     err => {\n//         return Promise.reject(err);\n//     });\n// // http response 拦截器\n// server.interceptors.response.use(\n//     response => {\n//         return response;\n//     },\n//     error => {\n//         if (error.response) {\n            \n//             switch (error.response.status) {\n//                 case 401:\n//                     store.dispatch('clearToken') // 清除token\n//             }\n//         }\n//         return Promise.reject(error.response.data)   // 返回接口返回的错误信息\n//     });\n\nexport default server"]}]}